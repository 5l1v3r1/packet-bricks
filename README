README
======

Packet BRICKS is a Linux/FreeBSD daemon that is capable of receiving and 
distributing ingress traffic to userland applications. It 
splits up traffic evenly across all registered applications. This
distribution is flow-aware (i.e. packets of one connection will always
end up in the same application). At the moment, pacet-bricks uses netmap 
packet I/O framework for receiving packets. It employs netmap pipes to 
forward packets to end host applications. 

The following guide provides a walkthrough of the scripts/startup.lua file
which also explains what this system is capable of.



						     _________
						    |	      |
						    |  APP 1  |
						    |_________|
					  eth3}0    /
      	   	    	      	     ______________/
      	   	    	      	     |
      	   	    	      	     |		     _________
      	   	    	      	     |    eth3}1    |	      |
      	   	    	      	     |  ____________|  APP 2  |
      	   	    	      	     | |            |_________|
   1/10 Gbps link     	     	     | |	
   |||||||||||||| ------->eth3{PACKET-BRICKS}	     _________
				     | |  eth3}2    |	      |
				     | |____________|  APP 3  |
				     | 		    |_________|
				     |
				     |    eth3}3
	 			     |_____________  
				     		   \
						    \_________
	      			     		    |	      |
	                     			    |  APP 4  |
						    |_________|
			         


User can start the program by running the following command:
# bin/bricks [-f startup_script_file]

To start the program as a daemon, either type:
# bin/bricks -d [-f startup_script_file]
		OR
# bin/bricks-server [-f startup_script_file]

If the system is executed as a non-daemon, it opens a 
LUA-based shell. Type the following command to print the help menu:
_________________________________________________________________
	bricks> bricks.help()
	BRICKS Commands:
    	    help()
    	    print_status()
    	    show_stats()
            shutdown()
          Available subsystems within BRICKS have their own help() methods:
          pkteng
_________________________________________________________________

Alternatively, the user can run `bricks-shell` to access the
interface shell to communicate with daemonized bricks-server.

You can hit Ctrl+D to exit the bricks-shell client. To gracefully
turn the daemon off, the user may enter the following command to 
exit the program:

_________________________________________________________________
	bricks> bricks.shutdown()
	Goodbye!
_________________________________________________________________


In packet-bricks, the most important component is the pkteng module.
It manages the reception and distribution of ingress traffic coming
thru an interface. After running packet-bricks again, use the following 
command to create a pkteng instance, pe:

_________________________________________________________________
	bricks> pe = PktEngine.new("e0", "netmap")
_________________________________________________________________

The "e0" field is internally used by packet-bricks as pkteng's ID. You
can delete the pkteng instance by running the following command:

_________________________________________________________________
	bricks> pe:delete()
_________________________________________________________________

The pkteng instance can be instantiated with the possibility of
affinitizing the engine thread to an arbitrary cpu:

_________________________________________________________________
	bricks> pe = PktEngine.new("e0", "netmap", 1)
_________________________________________________________________

The last parameter affinitizes the module to CPU 1 once the engine
thread starts reading packets. You can bind a pkteng with an 
interface by running the following command:

_________________________________________________________________
	bricks> intf = Interface.new("eth3")
	bricks> pe:link(intf, 1024, NO_QIDS)
_________________________________________________________________

This binds pkteng pe with interface eth3 and asks the system to
read ingress packets 1024 packets at a time. One can unbind the 
interface with the following command:

_________________________________________________________________
	bricks> pe:unlink()
_________________________________________________________________

The user can start the engine with the following command:

_________________________________________________________________
	bricks> pe:start()
_________________________________________________________________

The engine will start sniffing for packets from the interface 
promiscuously. You can use the following command to get the latest
packets related statistics from the engine:

_________________________________________________________________
	bricks> pe.show_stats()
_________________________________________________________________

Please note that you cannot unlink an interface from the pkteng
while the engine is running. To stop the engine, please run the 
following command:

_________________________________________________________________
	bricks> pe:stop()
_________________________________________________________________

To start forwarding packets from packet-bricks to an application, the
user needs to run the following command before starting the engine:

__________________________________________________________________________________________
	bricks> intf_in = Interface.new("eth3")
	bricks> intf0 = Interface.new("eth3{0")
	bricks> intf1 = Interface.new("eth3{1")
	bricks> intf2 = Interface.new("eth3{2")
	bricks> intf3 = Interface.new("eth3{3")
	bricks> intf_in:connect_loadbal(pe, intf0, intf1, intf2, intf3)
__________________________________________________________________________________________

This creates four netmap-specific channels named "netmap:eth3{x" where
0 <= x < 4. The traffic is evenly split between all four channels based
on the five tuple header (sip, dip, sport, dport, prot) information of 
incoming packets. Userland applications can now use packet-bricks to 
get their fair share of ingress traffic. Sample applications e.g. tcpdump 
(using netmap-libpcap) can use the following command to start 
reading traffic:

# tcpdump -i netmap:eth3}0 &
# tcpdump -i netmap:eth3}1 &
# tcpdump -i netmap:eth3}2 &
# tcpdump -i netmap:eth3}3 &

Host-BRICKS currently supports the following Rule Types ("actions"):

1- Load balancing (using Interface:connect_loadbal() method), and
2- Forwarding copy of each packet to every registered application
   (using Interface:connect_dup() method)


For user's convenience, the packet-bricks package comes with a reference
LUA script file: please see scripts/startup.lua file for details. 
Also, you can use the following command to load the script file in 
packet-bricks at startup:

# bin/bricks -f scripts/startup.lua, OR
# bin/bricks-server -f scripts/startup.lua

The user is recommended to skim through the script file. It is
heavily documented and also contains the code for how to run a 4-threaded
version of the pkteng.

=======================================================================
NOTE: Please install the required libraries mentioned in INSTALL file.
As the system is still under active development, the program may
exhibit unexpected behavior if libraries are not installed.

Please report bugs to: ajamshed@icsi.berkeley.edu