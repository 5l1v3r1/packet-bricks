#---------------------------------------------------------------------#
CC := @CC@
LUALIBPATH := @LUALIBPATH@
LUALIBNAME := @LIBLUANAME@
LUAINCPATH := @LUAINCPATH@
JEINCPATH := @JEINCPATH@
CFLAGS := @CFLAGS@
LDFLAGS := @LDFLAGS@
USEREADLINE := @USEREADLINE@
BINDIR := $(shell pwd)/bin
BINNAME := bricks
BIN := $(BINDIR)/$(BINNAME)
OSARCH := $(shell uname)
OSARCH := $(findstring $(OSARCH),FreeBSD Linux Darwin)
DEBUG_CFLAGS := -g -DDEBUG -Wall -Werror -Wunused-function -Wextra -D_GNU_SOURCE -D__USE_GNU
DEBUG_CFLAGS += -DDLUA -DDPKTENG -DDNMP -DDUTIL -DDIFACE -DDBKEND -DDPKTHASH -DDBRICK
INSTALL := @INSTALL@
INSTALL_PROGRAM := @INSTALL_PROGRAM@
INSTALL_DATA := @INSTALL_DATA@
# Top level hierarchy
prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
bindir = @bindir@
sbindir = @sbindir@
includedir = @includedir@
libdir =  @libdir@
mandir = @mandir@
sysconfdir = @sysconfdir@
#---------------------------------------------------------------------#
ifeq ($V,) # no echo
    export MSG=@echo
    export HIDE=@
else
    export MSG=@\#
    export HIDE=
endif

export OSARCH
export OBJDIR := $(shell pwd)/.objs
export CFLAGS += -O3 -pipe -Wall -Wunused-function -Wextra -Werror -D_GNU_SOURCE -D__USE_GNU 
ifeq ($(USEREADLINE),1)
	DEBUG_CFLAGS += -DLUA_USEREADLINE
	export CFLAGS += -DLUA_USEREADLINE
	export LDFLAGS += -lreadline
endif
export NETMAP_INCLUDE := -I$(shell pwd)/include/netmap

ifeq ($(OSARCH),FreeBSD)
	export INCLUDE := -I$(shell pwd)/include -I$(LUAINCPATH)/ -Isys/sys/
	export LIBS := -L$(LUALIBPATH)/ -llua-5.1 -lpthread -lpcap
	export LDFLAGS += $(LIBS)
else
	export INCLUDE := -I$(shell pwd)/include -I$(LUAINCPATH)/
	export LIBS := -L$(LUALIBPATH)/ $(LUALIBNAME) -lpthread -lpcap

	ifneq ($(strip $(JEINCPATH)),)
		export INCLUDE += -I$(JEINCPATH)
		export LDFLAGS += $(LIBS) -L$(JELIBPATH) -fno-builtin-malloc \
		-fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free \
		-fno-builtin-posix_memalign -ljemalloc
	else
		export LDFLAGS += $(LIBS)
	endif
endif
#---------------------------------------------------------------------#
all: $(BINNAME)

objs:
	mkdir -p $(OBJDIR)
	chmod a+x .create_bricks.sh
	bash ./.create_bricks.sh
	cd src && $(MAKE)

objs-dbg:
	$(eval export CFLAGS := $(DEBUG_CFLAGS))
	mkdir -p $(OBJDIR)
	chmod a+x .create_bricks.sh
	bash ./.create_bricks.sh
	cd src && $(MAKE)

$(BINNAME): objs
	mkdir -p $(BINDIR)
	$(MSG) "   LD $@"
	$(HIDE) $(CC) $(OBJDIR)/*.o $(LDFLAGS) -o $(BIN)
	@printf "#!/usr/bin/env bash\n$(BINDIR)/$(BINNAME) -d $$""@"> $(BINDIR)/$(BINNAME)-server
	@printf "#!/usr/bin/env bash\n$(BINDIR)/$(BINNAME) -s $$""@"> $(BINDIR)/$(BINNAME)-shell
	@printf "#!/usr/bin/env bash\npkill $(BINNAME)"> $(BINDIR)/$(BINNAME)-kill-server
	@printf "#!/usr/bin/env bash\necho \"\$$1\" > /tmp/bricks.iface\necho \"\$$2\" > /tmp/bricks.split\n$(sbindir)/$(BINNAME)-server -f $(sysconfdir)/$(BINNAME)-scripts/load-balance.lua" > $(BINDIR)/$(BINNAME)-load-balance
	@printf "#!/usr/bin/env bash\necho \"\$$1\" > /tmp/bricks.iface\necho \"\$$2\" > /tmp/bricks.split\n$(sbindir)/$(BINNAME)-server -f $(sysconfdir)/$(BINNAME)-scripts/duplicate.lua" > $(BINDIR)/$(BINNAME)-duplicate
	chmod a+x $(BINDIR)/$(BINNAME)-server
	chmod a+x $(BINDIR)/$(BINNAME)-shell
	chmod a+x $(BINDIR)/$(BINNAME)-kill-server
	chmod a+x $(BINDIR)/$(BINNAME)-load-balance
	chmod a+x $(BINDIR)/$(BINNAME)-duplicate
	strip $(BIN)

run: $(BINNAME)
	$(BIN) -f scripts/startup.lua
#---------------------------------------------------------------------#
debug: $(BINNAME)-debug

$(BINNAME)-debug: objs-dbg
	mkdir -p $(BINDIR)
	$(MSG) "   LD $@-debug"
	$(HIDE) $(CC) $(OBJDIR)/*.o $(LDFLAGS) -o $(BIN)
	@printf "#!/usr/bin/env bash\n$(BINDIR)/$(BINNAME) -d $$""@" > $(BINDIR)/$(BINNAME)-server
	@printf "#!/usr/bin/env bash\n$(BINDIR)/$(BINNAME) -s $$""@"> $(BINDIR)/$(BINNAME)-shell
	@printf "#!/usr/bin/env bash\npkill $(BINNAME)"> $(BINDIR)/$(BINNAME)-kill-server
	@printf "#!/usr/bin/env bash\necho \"\$$1\" > /tmp/bricks.iface\necho \"\$$2\" > /tmp/bricks.split\n$(sbindir)/$(BINNAME)-server -f $(sysconfdir)/$(BINNAME)-scripts/load-balance.lua" > $(BINDIR)/$(BINNAME)-load-balance
	@printf "#!/usr/bin/env bash\necho \"\$$1\" > /tmp/bricks.iface\necho \"\$$2\" > /tmp/bricks.split\n$(sbindir)/$(BINNAME)-server -f $(sysconfdir)/$(BINNAME)-scripts/duplicate.lua" > $(BINDIR)/$(BINNAME)-duplicate
	chmod a+x $(BINDIR)/$(BINNAME)-server
	chmod a+x $(BINDIR)/$(BINNAME)-shell
	chmod a+x $(BINDIR)/$(BINNAME)-kill-server
	chmod a+x $(BINDIR)/$(BINNAME)-load-balance
	chmod a+x $(BINDIR)/$(BINNAME)-duplicate
#---------------------------------------------------------------------#
clean:
	cd src && $(MAKE) clean
	$(RM) -rf include/brick.h
	$(RM) -rf $(BINDIR) include/*~ tags scripts/*~ *~

distclean: clean
	cd src && $(MAKE) distclean
	$(RM) -rf Makefile autom4te.cache config.log config.status
	chmod a-x .create_bricks.sh

.PHONY: clean

tags:
	find . -name '*.c' -or -name '*.h' | xargs ctags
#---------------------------------------------------------------------#
install:
	$(INSTALL_PROGRAM) $(BIN) $(sbindir)/
	$(INSTALL_PROGRAM) $(BIN)-server $(sbindir)/
	$(INSTALL_PROGRAM) $(BIN)-shell $(sbindir)/
	$(INSTALL_PROGRAM) $(BIN)-kill-server $(sbindir)/
	$(INSTALL_PROGRAM) $(BIN)-load-balance $(sbindir)/
	$(INSTALL_PROGRAM) $(BIN)-duplicate $(sbindir)/
	@echo "Placing the scripts in the $(sysconfdir)/$(BINNAME)-scripts/ directory"
	mkdir -p $(sysconfdir)/$(BINNAME)-scripts
	cp -R scripts/ $(sysconfdir)/$(BINNAME)-scripts
uninstall:
	$(RM) $(sbindir)/$(BINNAME)
	$(RM) $(sbindir)/$(BINNAME)-server
	$(RM) $(sbindir)/$(BINNAME)-shell
	$(RM) $(sbindir)/$(BINNAME)-kill-server
	$(RM) $(sbindir)/$(BINNAME)-load-balance
	$(RM) $(sbindir)/$(BINNAME)-duplicate
	$(RM) -r $(sysconfdir)/$(BINNAME)-scripts
#---------------------------------------------------------------------#
